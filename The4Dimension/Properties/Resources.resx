<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Actor" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="shift_jis"?&gt;
&lt;Root&gt;
  &lt;isBigEndian Value="False" /&gt;
  &lt;BymlFormatVersion Value="1" /&gt;
  &lt;C1&gt;
    &lt;C1 Name="Collision"&gt;
      &lt;A0 Name="Sensor" StringValue="Collision" /&gt;
    &lt;/C1&gt;
    &lt;C1 Name="Debug"&gt;
      &lt;A0 Name="NodeName" StringValue="地形" /&gt;
    &lt;/C1&gt;
    &lt;C1 Name="Executor"&gt;
      &lt;A0 Name="CategoryName" StringValue="固定地形" /&gt;
    &lt;/C1&gt;
    &lt;C1 Name="GroupClipping"&gt;
      &lt;D1 Name="MaxCount" StringValue="64" /&gt;
    &lt;/C1&gt;
    &lt;FF Name="Model" StringValue="00000000" /&gt;
  &lt;/C1&gt;
&lt;/Root&gt;</value>
  </data>
  <data name="AllStageList" xml:space="preserve">
    <value>FirstStageMap1.szs
CaveInkStageMap1.szs
DownHillStageMap1.szs
BalanceTruckStageMap1.szs
KoopaFirstStageMap1.szs
FieldWalkStageMap1.szs
CavePatanStageMap1.szs
DotCoinStageMap1.szs
JumpFlipGeneratorStageMap1.szs
BattleShipKillerStageMap1.szs
DesertRuinStageMap1.szs
AquariumSwimStageMap1.szs
SkyChikuwaStageMap1.szs
MountainRopeStageMap1.szs
SweetsScrollStageMap1.szs
FortressSpikeStageMap1.szs
UpUpLandStageMap1.szs
CaveClimbStageMap1.szs
SkyRotateBlockStageMap1.szs
FlashTeresaStageMap1.szs
SkyPatanStageMap1.szs
BattleShipPanelStageMap1.szs
BoomerangMountainStageMap1.szs
DungeonTrapStageMap1.szs
SkyLiftStageMap1.szs
TunnelMazeStageMap1.szs
ProperaBlockStageMap1.szs
KoopaSecondStageMap1.szs
BridgePukupukuStageMap1.szs
PyramidSpikeStageMap1.szs
TrickTeresaStageMap1.szs
BeatKabeheiStageMap1.szs
MoveTrampolineStageMap1.szs
BattleShipSpikeStageMap1.szs
UnderseaTunnelStageMap1.szs
NeedleRollerStageMap1.szs
RopeClimbStageMap1.szs
InsideClockStageMap1.szs
WoodFallStageMap1.szs
BattleShipRollerStageMap1.szs
FortressGororiStageMap1.szs
CanyonPoleStageMap1.szs
StopRotateStageMap1.szs
LiftTeresaStageMap1.szs
CanyonPanelStageMap1.szs
KoopaThirdStageMap1.szs
LavaWheelStageMap1.szs
KoopaLavaTruckStageMap1.szs
KoopaLastStageMap1.szs
FieldWalkStageMap2.szs
CaveInkStageMap2.szs
DotCannonStageMap1.szs
BridgePukupukuSp1StageMap1.szs
KoopaFirstStageMap2.szs
CloudLiftScrollStageMap1.szs
AquariumSwimStageMap2.szs
BalanceTruckSp1StageMap1.szs
MoveTrampolineStageMap2.szs
SkyPatanStageMap2.szs
FortressSpikeStageMap2.szs
SwingLiftFallSpStageMap1.szs
SkyRotateBlockSpStageMap1.szs
RopeClimbStageMap2.szs
NeedleRollerStageMap2.szs
BeatKabeheiStageMap2.szs
BattleShipKillerSp2StageMap1.szs
EnemyLiftTowerSpStageMap1.szs
FlashTeresaStageMap2.szs
BridgePukupukuSp2StageMap1.szs
DownHillStageMap2.szs
SkyChikuwaSpStageMap1.szs
BossParadeSpStageMap1.szs
JumpFlipGeneratorSpStageMap1.szs
NeedleRollerStageMap3.szs
BalanceTruckSp2StageMap1.szs
SweetsScrollSpStageMap1.szs
TrickTeresaSpStageMap1.szs
KoopaSecondStageMap2.szs
DesertRuinStageMap2.szs
SkyChikuwaSp2StageMap1.szs
CavePatanStageMap2.szs
SkyRotateBlockStageMap2.szs
LiftTeresaStageMap2.szs
BattleShipPanelSpStageMap1.szs
MountainRopeStageMap2.szs
BeatKabeheiStageMap3.szs
InsideClockSpStageMap1.szs
JumpFlipGeneratorStageMap2.szs
BattleShipRollerSpStageMap1.szs
KoopaFirstStageMap3.szs
CaveInkStageMap3.szs
StopRotateSpStageMap1.szs
KoopaSecondStageMap3.szs
LavaWheelStageMap2.szs
BattleShipRollerSpStageMap2.szs
KoopaThirdStageMap2.szs
ChampionshipSpStageMap1.szs</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="BaseModels" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\BaseModels.zip;System.Byte[], mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </data>
  <data name="GenericCameraParam" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="shift_jis"?&gt;
&lt;Root&gt;
  &lt;isBigEndian Value="False" /&gt;
  &lt;BymlFormatVersion Value="1" /&gt;
  &lt;C1&gt;
    &lt;C0 Name="CameraParams"&gt;
      
    &lt;/C0&gt;
    &lt;C1 Name="VisionParam"&gt;
      &lt;D2 Name="FarClipDistance" StringValue="80000" /&gt;
      &lt;D2 Name="FovyDegree" StringValue="45" /&gt;
      &lt;D2 Name="NearClipDistacne" StringValue="100" /&gt;
      &lt;D2 Name="StereovisionDepth" StringValue="0,4" /&gt;
      &lt;D2 Name="StereovisionDistance" StringValue="200" /&gt;
    &lt;/C1&gt;
  &lt;/C1&gt;
&lt;/Root&gt;</value>
  </data>
  <data name="PatchScript" xml:space="preserve">
    <value>@echo off
Title CCNT patcher
cls
echo This will add the object entries to the CreatorClassNameTable.szs file.
echo You should make a backup of this file.
echo Press enter to continue
pause &gt;nul
Start /W Patcher.exe CCNTpatch Done, you are ready to go !
del 3DS.dll
del CCNTpatch.xml
del CommonCompressors.dll
del CommonFiles.dll
del LibEveryFileExplorer.dll
del NDS.dll
del Patcher.exe
del "Patch script.bat"</value>
  </data>
  <data name="Sensor" xml:space="preserve">
    <value>&lt;?xml version="1.0" encoding="shift_jis"?&gt;
&lt;Root&gt;
  &lt;isBigEndian Value="False" /&gt;
  &lt;BymlFormatVersion Value="1" /&gt;
  &lt;C0&gt;
    &lt;C1&gt;
      &lt;A0 Name="Name" StringValue="Collision" /&gt;
      &lt;A0 Name="Type" StringValue="CollisionParts" /&gt;
    &lt;/C1&gt;
  &lt;/C0&gt;
&lt;/Root&gt;</value>
  </data>
</root>